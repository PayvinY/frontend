pipeline{
  agent any
/*    parameters {

      string(name:  'FE_S3_Bucket' , defaultValue : '', description: 'S3 bucket with frontend')
      string(name:  'CF_DIST_ID' , defaultValue : '', description: 'Cloudfront distribution ID')
      string(name:  'BACKEND_ENDPOINT' , defaultValue : '', description: 'API endpoint URL')
    }
  environment {
    FE_S3_Bucket = 'payvinyhillel'
    CF_DIST_ID = 'E1TDB6JUZH3UVG'
    BACKEND_ENDPOINT = 'https://api.yurii.tiab.tech/api'
    ECS_SERVICE_NAME = "conduit"  
    CLUSTER_NAME = "yurii-tiab-tech"
    ECR_URL = "228435919907.dkr.ecr.us-east-1.amazonaws.com.yurii-tiab-tech-conduit"
    ECR_URI = "228435919907.dkr.ecr.us-east-1.amazonaws.com"
  }
*/
  environment {
   AWS_DEFAULT_REGION = 'us-east-1'
//   BRANCH_NAME = 'master'
  }

  stages{
        stage("Build") {
            agent {
                docker { 
                    image 'node:12'
                    reuseNode true
                }
            }
            steps {
                withAWSParameterStore(
                    credentialsId: 'aws_creds',
                    naming: 'basename',
                    path: "/${env.BRANCH_NAME}",
                    regionName: "${env.AWS_DEFAULT_REGION}"
                ){
                    sh 'env'
                   contentReplace( 
                    configs: [ 
                        fileContentReplaceConfig( 
                            configs: [ 
                                fileContentReplaceItemConfig( 
                                    search: "BACKEND_ENDPOINT_VARIABLE",
                                    replace: "${env.BACKEND_ENDPOINT_VARIABLE}",
                                    matchCount: 1
                                )
                            ],
                            fileEncoding: 'UTF-8',
                            filePath: './src/agent.js'
                        ) 
                    ]
                  )
                }
                sh 'npm install'
                sh 'npm run build'
            }
        }
        stage("Deploy") {
            environment {
                AWS_DEFAULT_REGION = "${env.AWS_DEFAULT_REGION}"
            }
            agent {
                docker {
                    image 'amazon/aws-cli'
                    reuseNode true
                    args '--entrypoint=""'
                }
            }
            steps {                
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding', 
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                    credentialsId: 'aws_creds', 
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                      withAWSParameterStore(
                        credentialsId: 'aws_creds',
                        naming: 'basename',
                        path: "/${env.BRANCH_NAME}",
                        regionName: "${env.AWS_DEFAULT_REGION}"
                      ){
                        // sh 'env'
                        sh """
                        aws s3 sync ./build/ s3://${env.S3_BUCKET_NAME}/ 
                        aws cloudfront create-invalidation --distribution-id ${env.CF_DIST_ID} --paths "/*"
                        """
                       }
                  }
            }
        }
  }
  post{
        always{
            cleanWs()
        }
  }
}
